name: scheduler

docstring: |
   The scheduler services provides a central scheduling capability.
   In particular it provides a schedule based timer that triggers TimerEvents with
   requested fields set so that the client can subscribe to these events.

spec: https://confluence.oceanobservatories.org/display/CIDev/Scheduler+Service (needs update)

dependencies: [resource_registry]

methods:
  create_timer:
    docstring: |
      Create a timer which will send TimerEvents as requested for a given schedule.
      The schedule request is expressed through a specific subtype of TimerSchedulerEntry.
      The event is delivered as a TimeEvent to which processes can subscribe. The creator
      defines the fields of the event. A GUID-based id prefixed by readable process name
      is recommended for the origin. Because the delivery of the event is via the ION Exchange
      there is potential for a small deviation in precision.
      Returns a timer_id which can be used to cancel the timer.
    in:
      scheduler_entry: !SchedulerEntry
    out:
      timer_id: ""
    throws:
      BadRequest: if timer is misformed and can not be scheduled

  cancel_timer:
    docstring: |
      Cancels an exisiting timer which has not reached its expire time.
    in:
      timer_id: ""
    out:
    throws:
      NotFound: if timer_id doesn't exist

  create_interval_timer:
    docstring: |
      Creates IntervalTimer object
    in:
      start_time: ""
      interval : 0
      end_time: ""
      event_origin : ""
      event_subtype : ""
    out:
      timer_id: ""
    throws:
      BadRequest: if timer is misformed and can not be scheduled

  create_time_of_day_timer:
    docstring: |
      Creates TimeOfDayTimer object
    in:
      times_of_day : []
      expires : ""
      event_origin : ""
      event_subtype : ""
    out:
      timer_id: ""
    throws:
      BadRequest: if timer is misformed and can not be scheduled

  on_system_restart:
    docstring: |
      Restores Scheduler state during a system restart
    in:
    out: