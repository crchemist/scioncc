# Central base configuration file for SciON container, system and services.
# Configuration is available at runtime:
#   from pyon.public import CFG
#   CFG.get_safe("server.amqp.host", 1234)
# Do not modify this file! Set overrides in pyon.local.yml, in additional
# YML files, in deploy files and through the command line

# DO NOT ADD NEW TOP LEVEL KEYS AND REQUEST APPROPRIATE CFG KEYS


# ----------------------------------------------------------------------------------
# The "system" root entry defines settings for the distributed SciON system that this
# container starts or joins. A system comprises all containers with the same sysname.
system:
  # Set to define sysname in tests. Otherwise set via pycc --sysname or use default
  name:

  # Name of the Org that bootstraps the system and acts as "Super-Org"
  root_org: ION

  # The name of the actor used for actions on behalf of the SciON system
  system_actor: ionsystem

  # Global flag indicating debug mode to all system participants
  debug: True

  # Global flag that indicates if pycc programs should check on startup for
  # the presence of persisted system config and interfaces and store otherwise.
  # Use this in development only as this leads to race conditions with multiple
  # concurrently starting containers, or execute bin/store_interfaces before.
  auto_bootstrap: True

  # Global config for use of a Real SMTP server or a fake logging class
  # True is Real, False is fake
  smtp: False

  # Indicates whether policy should be loaded during system bootstrap (False is for development only)
  load_policy: False

  # The base Web UI URL to generate absolute links from
  web_ui_url: http://localhost:4000/


# ----------------------------------------------------------------------------------
# The "bootstrap" root entry defines settings for the system bootstrapping and
# restart process.
bootstrap:


# ----------------------------------------------------------------------------------
# The "server" root entry defines named sets of connections/credentials TO external servers.
# These named entries can be referenced in other settings.
server:
  amqp:
    # The normal container broker connection
    type: amqp_91
    host: localhost
    port: 5672
    username: guest
    password: guest
    vhost: /
    heartbeat: 30
  amqp_priv:
    # The privileged broker connection used for making changes to broker resources
    type: amqp_91
    host: localhost
    port: 5672
    username: ion
    password: ion
    vhost: /
    heartbeat: 30
  rabbit_manage:
    # REST access to RabbitMQ management plugin
    type: rabbit_mgmt
    host: localhost
    port: 15672
    username: guest
    password: guest

  postgresql:
    type: postgresql
    host: localhost
    port: 5432
    username: ion
    password:
    admin_username:             # If empty, defaults to current login username
    admin_password:
    default_database: postgres  # Postgres' internal database
    database: ion               # Database name for SciON (will be sysname prefixed)
    connection_pool_max: 5      # Number of connections for entire container

  smtp:
    # Outgoing email server
    type: smtp
    host: mail.server.org
    port: 25
    sender: alerts@server.org
    password: ""

  localrouter:
    # In-container async message router
    type: local


# ----------------------------------------------------------------------------------
# The "container" root entry defines settings for the current ScionCC container
container:
  # Capability profile to use (assumes a file in res/profile/<name>.yml unless
  # a path is specified). Determines what capabilities the container offers.
  profile: development

  datastore:
    default_server: postgresql  # Which server connection (and type) to use as primary datastore
    server_types:               # Definition of the known server types and how to start them
      postgresql:
        base: pyon.datastore.postgresql.base_store.PostgresDataStore
        full: pyon.datastore.postgresql.datastore.PostgresPyonDataStore

  messaging:
    auto_register: True
    names:
      durable: False         # Declare exchanges and queues as durable to survive broker restart
    server:
      primary: amqp
      privileged:
    management:
      server: rabbit_manage
    endpoint:
      prefetch_count: 1      # how many messages to prefetch from broker by default
    timeout:
      start_listener: 30.0
      receive: 30            # RPC receive timeout in seconds

  process:
    exit_once_empty: True    # Whether the container should exit once all spawned processes have been terminated
    log_exceptions: False    # Whether all RPC call invocation exceptions should be logged
    max_replicas: 0          # Limit the number of process replicas to start per container (0 is unlimited)

  objects:
    validate:
      setattr: False
      interceptor: True

  timeout:
    shutdown: 30.0
    heartbeat: 30.0
    heartbeat_proc_time_threshold: 600.0
    heartbeat_proc_count_threshold: 20

  org_boundary: False  # If True, then check against policies related to the Org below; else do not.

  org_name: ION  # The default is the Scion root Org

  filesystem:
    force_clean: False
    root: /tmp/scion

  tracer:
    enabled: False        # Enable the database class and message tracer in container
    max_entries: 10000    # Length of trace buffer

# TODO: Move into container and split into process and messaging
interceptor:
  interceptors:
    sample:
      class: pyon.core.interceptor.sample.SampleInterceptor
    sampleprocessonly:
      class: pyon.core.interceptor.sample.SampleProcessOnlyInterceptor
    validate:
      class: pyon.core.interceptor.validate.ValidateInterceptor
      config:
        enabled: true
    encode:
      class: pyon.core.interceptor.encode.EncodeInterceptor
      config:
        max_message_size: 20000000
    governance:
      class: pyon.core.governance.governance_interceptor.GovernanceInterceptor
      config:
        enabled: true
        interceptor_order: [policy]
        governance_interceptors:
          policy:
            class: pyon.core.governance.policy.policy_interceptor.PolicyInterceptor

  stack:
    message_outgoing: [validate, encode]
    message_incoming: [encode, validate]
    process_outgoing: [governance]
    process_incoming: [governance]

# ----------------------------------------------------------------------------------
# The "exchange" root entry contains config of the system wide Exchange for bootstrap
exchange:
  exchange_spaces:
    # define the names and structure of exchange spaces and exchange points
    system:
      description: The system root exchange space
      exchange_points:
        data:
          type: ttree
          description: System default exchange point for data streams
        events:
          type: ttree
          description: System default exchange point for system events

  exchange_brokers:
    system_broker:
      server: amqp
      description: Primary exchange broker (RabbitMQ 3.x, AMQP 0.9.1)
      join_xs: [system]
      join_xp: []

  # Well known exchange elements
  core:
    # System root exchange space
    system_xs: system
    # XP for system events
    events: events
    # XP for data streams
    data_streams: data


# ----------------------------------------------------------------------------------
# The "process" root entry with config for specific process types
process:
  event_persister:
    persist_interval: 1.0
    persist_blacklist:
    - event_type: TimerEvent
    - event_type: SchedulerEvent

  admin_ui:                  # Config for admin UI, started with --mx option
    web_server:
      port: 8080
    association_graph: False    # Show D3 graph of associations
    read_only: False            # Run in read-only mode

  ui_server:
    server:
      enabled: true
      hostname: localhost
      port: 4000
      socket_io: false
      log_access: true
      log_errors: true
    security:
      secret: ""             # Server secret for cookie encryption
      session_timeout: 900   # Timeout in seconds
    service_gateway:
      enabled: true
      url_prefix: /service
    extensions: []   # A list of fully qualified class names implementing the UIExtension interface


# ----------------------------------------------------------------------------------
# The "service" root entry
service:
  resource_management:
    max_search_results: 250

  service_gateway:
    trusted_originators: []  # Optional list of trusted addresses; an empty list means open system
    service_whitelist: []    # Names of services accessible via the gateway. If empty, all are accessible
    service_blacklist: []    # Names of services not accessible via the gateway. Applies after white list
    user_cache_size: 2000    # The number of user's whos role data is cached in the gateway
    develop_mode: true
    require_login: true      # Must provide session or token and no anonymous access allowed

units: res/config/units/udunits2.xml


