===========================================================
Scientific Observatory Network (SciON)
===========================================================

(C) Individual Contributors, 2014
Open source under BSD license. See LICENSE for details.

Originally based on the:

Ocean Observatories Initiative Cyberinfrastructure (OOI CI)
Integrated Observatory Network (ION)

(C) The Regents of the University of California, 2010-2014
Open source under BSD license. See LICENSE for details.
===========================================================


DESCRIPTION
===========

SciON provides an extensible Python application server, core frameworks and
services for a variety of applications, including scientific observation,
data streaming and signal processing.

SciON provides a message-driven, service-oriented scalable application
deployment platform that can be extended to meet custom needs.

Based on the Ocean Observatories Initiative Cyberinfrastructure.
See:
  https://github.com/ooici/coi-services
  https://github.com/ooici/pyon


INSTALL
=======

See file INSTALL for details.


CONFIGURE
=========

Provide local configuration (e.g. host names, passwords, log levels) in:
    > res/config/pyon.local.yml
    > res/config/logging.local.yml
    Note: You can copy from res/config/examples. DO NOT EDIT the provided config files.


USE
===

Start a development instance of the SciON system with basic services:
    > bin/pycc --rel res/deploy/basic.yml

List supported Pyon Capability Container arguments:
    > bin/pycc --help

Run unit tests:
    > bin/nosetests -v -a UNIT

Run smoke tests to verify sanity of the system:
    > bin/nosetests -v -a SMOKE

Run full integration tests - this will take a long time so may be optional:
    > bin/nosetests -v -a INT


INTERACTIVE SHELL
=================

After startup with bin/pycc, the capability container drops into an interactive
IPython shell. Introspect running services or perform any Python programming step.


TROUBLESHOOTING
===============

To reset the system's messaging and datastore persistence, call:
    > bin/pycc -X -fc -bc

Clean outdated code (*.pyc files):
    > ant clean
    > bin/generate_interface

If your tests still fail, you might have some incorrect values in
pyon.local.yml or logging.local.yml.  Check with other developers.

If your tests fail unexpectedly when you have tried everything else, your build
might be corrupted.
    > deactivate your existing virtualenv
    > rm and create the virtualenv again
    > re-run bootstrap.py and buildout
    > If you suspect an egg is bad, remove the suspected egg from the eggs/ dir. Re-run buildout.

See also:
  https://confluence.oceanobservatories.org/display/CIDev/Python+and+Virtualenv+Mac+Troubleshooting
  https://confluence.oceanobservatories.org/display/CIDev/Troubleshooting+OOINet+and+the+developer+environment


DEBUG
=====

Use Pycharm or any other Python IDE to debug; breakpoints and step-by-step
are possible. Set the executable to the bin/pycc and set the working directory
to the git repository root. Use the -n option to avoid the interactive IPython
shell--it does not work properly with the debugger.

Start bin/pycc or bin/nosetests scripts in the debugger, with arguments.

PyCharm may need to be enabled to run with gevent. Google how to do this.

Remote debugging of services in a running container is possible too. Setup a
remote debugging configuration to use the localhost and port 8585. First start
the remote debugging server, then start the container from the command line
below using the pyccd script (the -n seems to be required):
    > bin/pyccd -n --rel res/deploy/xxx.yml


GIT SUBMODULE HOOKS
===================

A git hook is a script that executes during various points of using git.
Git hooks exist automating submodules for most people. See the steps here:
http://blog.chaitanyagupta.com/2009/08/couple-of-hooks-to-make-life-easy-with.html

They do require an initial setup. Simple instructions:

Clone this repository:
    > cd /some/tmp/directory
    > git clone https://github.com/chaitanyagupta/gitutils.git

Use the provided install script:
    > sh gitutils/submodule-hooks/install.sh /path/to/your/pyon/or/coi-services/dir

Now, when checking out a branch, pulling, merging etc, git will prompt you to
automatically update if it notices a change to the commit that your supermodule
points to.

The pre-commit script is so you don't forget to push changes to the submodule
*BEFORE* you push changes to the supermodule.

See more about submodules:
- http://book.git-scm.com/5_submodules.html
- http://speirs.org/blog/2009/5/11/understanding-git-submodules.html
- http://blog.endpoint.com/2010/04/git-submodule-workflow.html
